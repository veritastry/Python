返回具体对象的
get()
first()
last()
返回布尔值：
exist()
返回具体数值的：
count()
单表查询的双下划线：
models.Book.objects.filter(id__gt=1)
models.Book.objects.filter(id__in=[1,2,3])
models.Book.objects.filter(id__range=[1,5])
models.Book.objects.filter(title_contains='沙河')
#找到书的名字包含沙河的
models.Book.objects.filter(id__icontains='沙河')
这个加个i是忽略大小写
models.Book.objects.filter(title_startswith='沙河')
是以什么开头，是以什么结尾
models.objects.filter(publish_date__year=2017)
出版的日期
models.Book.objects.filter(publsih_data__mouth=2017)
外键查询：

正向查询：
基于对象
book_obj=models.objects.get(id=2)
book_obj.publish.name

基于双下划线:
models.Book.objects.filter(id=1).values('publish_naem')

反向查询：（由出版社查询书）
基于对象：
publisher_obj=models.Publisher.objects.get(id=1)
默认反向查找的时候是表名字加上_set
publisher_obj.book_set.all()
如果在外键中设置了related_name='book'
publisher_obj.books.all()
这个是在这个表里面加了这个关联的外建

基于双下划线：
models.Publsher.objects.filter(id=1).values('book__name')

如果配置了related_query_name='book'
models.publisher.objects.fliter(id=1）.values('books__name')



4.分组和聚合：
1.聚合

from django.db.model import Avg.Sum.Max,Min
models.Book.objects.all().agregrate(Avg('price'))
拿到所有的书籍的价格求这的平均值



2.分组
book_list=models.Bok.objects.all().annotation(author_nmae=Count('author')
这个是拿到所有的书籍的价格求这平均值











5.F和Q





6.事物


7.执行原生的sql的语句




