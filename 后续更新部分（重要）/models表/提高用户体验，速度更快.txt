
和性能相关的：
ORM操作：
only
defer
selected_related主动做连表操作
一般用于onetoone和外键（性能有所提高）
prefetch_related主动做连表查询


之前的是：当进行外键查询的时候，每来一次都进行连表操作
当下面的时候，就是只是一次连表操作 

连表多，性能越来越差
单表操作要比连表操作更快



比较;
最原始的：(假如有10条数据的话，执行11次单表操作）
result=user.objects.all()
for  item  in  result:
print(item.name,item.dp.name)





2 支持外键，onetoone，不支持manytomany（执行1次链表操作）
selected_related主动做连表操作（一次链表）
当连表次数过多的话，性能就会越来越差


User.objects.all().selected_related('dp')


result=User.objects.all().selected_related('dp')（拿到这个外键的字段（对象））
for  item  in result:
print(item.name,item.dp.name)

讲解：
执行了一次链表操作，当第一次来访问的时候，已经拿到了所关联的外键的的字段（对象）
然后在外键（所关联的表的字段信息）取到相对应的数据，最原始的是
每一次来都要访问这个单表，然后在单表所关联的字段拿数据





3，可以支持manytomany（执行2次单表操作）
prefetch_related(2次单表)
user.objects.all().prefetch_related('dp')##这个做了两次操作
（第一个是拿到所有的id，第二个是后面的拿到所有的dp_id)

select  * from  user
当第一次来单表的话，会拿到所有的想要查询的字段id(dp)（一次单表）
拿到所有的关联的外键dp(dp_id=[1,2])
select   * from   id  in dp_id
在基于这个表进行单表的查询（第二次单表）
for  item  in result:
print(item.name,item.dp.name)

讲解：
当第一次来的时候，就拿到了所关联的对象（外键）
会拿到你想要查询的字段信息，（比如外键id），在拿到你想要查询的关联外键对象的信息

把相关的数据拿到之后，在根据数据在这个表做二次筛选







注意：上面的多少次是基于result执行了多少次，当是单表的时候，就是基于原来的表拿到的数据
当是链表的话，是基于原来的表在进行外键的查询



为什么foreign：
省硬盘
做约束
数据量比较大，不会使用foreign，允许出现数据冗余