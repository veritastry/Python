queryset的反向查询：
ret=models.Article.objects.first().comment_set.all().count()
可以计数

在html里面应该是
ret=models.Article.objects.first().comment_set.all.count


加blank=True的话，这个就可以在admin里面实现这个可以为空
在django里面这个admin也可以不填，显色表示可以不填 
当null=true的时候，就可以是实现这个在表里面可以不填
 
query:
当这个是queryset类型的时候，可以通过__来反向查找这个值
ret=models.Article.objects.all().values('user__avatar')跨表查询





对象：
当这个类型是get的对象的类型的时候，可以通过.来反向查询这个了一个表的
内容

ret=models.Article.objects.get(pk=1).user.avatar




反向查询是通过另一个表（里面有这个外键和你这个表相关联的外键）
进行的查询操作
在comment表里面：这个表里面是没有这个coment的字段的
article = models.ForeignKey(to="Article", to_field="nid",on_delete=models.CASCADE)


在article里面
通过在article这个表里面进行查找则这个评论的值
models.Article.objects.first().comment_set.all()
这样就拿到这个了全部的评论值
表名字+set就是反向查询




queryset类型集合：
ret=models.Article.objects.all().values('user__avatar')
filter
values






对象集合：
first()
last()
get(pk=1)














