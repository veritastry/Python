第一种方式：
values()取到是字典的形式
values[{},{}]


第二种：
values_list('id',list)
元祖的形式[(),()]


第三种：
queryset=(bj,obj])里面都是对象
all_oj=models.user.objects.all().only('id','nmae')
for  item in all_oj:
print(item.id,item.detail)
下面的这种可以取数据,可以取相关联的数据出来
但是会基于id循环的取值


第四种：
defer是不取那一列，和上面的only相反




在性能上有所提高
查询外键的字段的信息
result=models.User.objects.all().selected_related('dp')
后面的dp是外键字段，主动创建外键字段
而上面的方式是主动建立外键的关系，及时在查询的时候，已经建立好了关系，不是每次从原来的表里面取拿数据，而是去所关联的
表里面拿数据 






如果用原来得方法来进行查询的话，性能很低
原来的外键的查询方法，就是说当查询一次之后，在返回来在查询一次

