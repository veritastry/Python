'''
3种形式：
tulpe
handler(**('asa','dsf'))元祖的形式
list
handler(**['asa','dsf')列表的形式
map
# handler(**{'asa':'dsf'})字典的形式,**kwargs只能是map的形式，字典的形式
'''





*args
可以传多个参数进来，也可以是列表[]，也可以是字典{}，也可以是元祖()


最后打印的这个结果都是元祖的形式

def bar(*args):####这个*args可以是列表或者是元祖的形式,也可以是字典的形式
    print(args)
bar(13,4,54,5)##这个*args是相当于元祖的形式进行的传参
##data只接受一个参数,后面可以是多个参数（元祖的形式，列表的形式）
bar({'fds':'dfsf'})##当以字典的形式传进来的时候，最终结果也是元祖的形式({'fds': 'dfsf'},)
bar([32,43,44])

'''
(13, 4, 54, 5)
({'fds': 'dfsf'},)
([32, 43, 44],)
'''
bar(*[32,43,32],32332)
'''(32, 43, 32),解释一下，上面的这个*是相当是传了多个参数进来'''
# 相当有事下面得这种方式
bar(32,43,455,45)##
bar(*[32,43,32],32332)
'''(32, 43, 32, 32332)
想到于是传了多个参数进来
'''







**kwargs（只能是字典的形式，前面得 加**，才可以当成关键字参数穿进去）


def foo(**kwargs):##只能是字典的形式
    pass

'''argument after ** must be a mapping, not tuple'''

# foo(233,43,434)
# foo({'es':323})
# foo([32,323])
# foo(*(32,3,43))
# foo(**(323,434))


# foo(**{fgd:3233})
foo(**{'a':434})


####前面有接受的参数的时候
# foo(122,**{'a':323}



