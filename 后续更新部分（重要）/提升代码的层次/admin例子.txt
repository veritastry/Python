from  django.shortcuts import   render,redirect,HttpResponse
from   django.conf.urls   import url

class  Self_Modeladmin(object):
    def __init__(self,model,site):
        self.model=model
        self.site=site
        print('Self_Modeladmin'*1000)
        ##########<class 'app01.models.Room'>
        print(model)
        print('*'*1000)
    def add(self,request):
        print(self)
        return  HttpResponse(self.model._meta.model_name)

    def  list(self,request):

        return  HttpResponse(self.model._meta.app_label)


    def  change(self,request,id):

        return   HttpResponse(self.model._meta.app_label)


##通过传参数进来调用的时候，不用在加参数进来了，否则会重复
    def   delete(self,request,id):

        return  HttpResponse(self.model._meta.app_label)



###########进行增删改查操作
    '''
    原来讲解：
    当是加静态方法进行调用的时候，没有传了一个参数进来，当没有加这个静态方法的时候，你会传参数进来，所以就可以在add函数
    里面少传一个参数进来，注意区别
    '''
    @property
    def  get_url3(self):
        dic=[]
        ##类下面的每一个实例对象都有一块独立的内存空间，这个增删改查是独立开来的
        dic.append(url(r'^(\d+)/delete/',self.delete))
        dic.append(url(r'^(\d+)/change/',self.change))
        dic.append(url(r'^add/',self.add))
        dic.append(url(r'^list/',self.list))
        return  dic,None,None





class Self_AdminSite():
    def  __init__(self):
        self._register={}

###这里面传入两个参数，后面的这个参数可以为空
    def register(self,model,stark_class=None):
        if  not  stark_class:
            print('看看有没有自定义的类')
            print(stark_class)
            print(self,model)
            #####假如没有自定义的类的话，就用父类方法
            stark_class=Self_Modeladmin
        self._register[model]=stark_class(model,self)#在这里已经传了两个参数进去，在了一个了里面可以直接进行调用
#############注明一下，后面的这个模型类对象是有参数的（adminbook(book))这个是有传参数过去的  self.model=book这个是可以直接去取这个里面的数据的



    @property
    def  get_urls(self):
        dic = []
        ##注明一下，这个第一个是model表，第二个是自定义的类，字典里面哟这两个值
        for  model,admin_class in  self._register.items():
            app_name=model._meta.app_label
            model_name=model._meta.model_name##这个是字段的名字
            # dic.append(url(r'^%s/%s/'%(app_name,model_name),(admin_class.get_url2,None,None)))
#######在下面注明，当这个model有自定义部分的时候，这就是这个于自定义的类，当没有自定义的时候，这个就是默认的继承的父类的部分，样式（部分）
            dic.append(url(r'^%s/%s/'%(app_name,model_name),admin_class.get_url3))

            ######上面的两种方法是一样的，这个之前调用的都是同一个类进行的调用

            # dic.append(url(r'^%s/%s/'%(app_name,model_name),
            #                ([ url(r'^delete', ModelStark.list)],None,None
            #                )))


        return  dic


    ###如果不加静态方法的话，那么这个在urls里面就拿到一个方法，拿不了这个对象（报错，缺少了参数，应该是返回3个参数）
    @property
    def urls(self):
        # return  self.get_urls(),None,None

        # a = []
        # b = url(r'^delete', self.list)
        # a.append(b)

        # c=(a,None,None)

        # print('这个a的url是:',a)
        return   self.get_urls,None,None
site=Self_AdminSite()




'''
url('',(get_url(
[url(r'^',self.,
url


),None,None),


'''