购物车:
认证
get  query_params，request.GET.get拿到这个token进行校验

讲解：
首先第一个是用户
后面是公共的部分，还有不同的部分（价格策略）


{shopping_user_id_course_id{
goods_name:'',
img:'',
default:'',
##价格策略，一个商品有多个版本，所以有多个价格策略
price_policy:{
perid:'',
tea:''
time:''
等
}
}

价格策略进行合法性校验
查询在数据库有没有（course.objects.values('id')),价格策略就是对应的课程的id
表，课程行号（course_id）


添加数据：
course_id, price_policy_id
hmset设置多个值
conn.hmset(shopping_user_id_course_id,dic)
dic是多个值（里面有dic[1],dic[2]等），所以是批量设置值进去
str(字节,encoding='utf-8')


删除数据

可以涉及到批量删除
所以传入的course_id是元祖的形式


conn.delete(*course_id_list))



查看：
没有接受到任何的参数
查所有的数据（某一个用户）
user_id=requeest.session.get('username_id')
shopping_user_id_*  后面的*可以匹配所有的数据（对于这个用户）
shopping_user_id_1,shopping_user_id_2,shopping_user_id_3等


price_policy处理
decode('utf-8')将字节转化为字符串的形式
json.loads().decode('utf-8')  
把字节的形式转化为字符串，在把这个里面的字典（没有反序列化处理的)》》》》》》反序列化的对象（可以进行处理的对象）



修改：
只修改价格策略




代码的规范：
简单逻辑往上放
try
细粒度异常（检测出是哪一个部分出现了异常的情况，在返回具体的异常情况） +自定义异常
导入模块：
内置
框架
自定义
注释：
文件
类
函数
文件名字，类，函数
对功能进行分类
减少代码层次
BaseResponse（自定义的，可以在公共模板里面调用）

注意：
有的可以放在settings里面或者是自己创建公共的模板，进行调用








结算中心：











