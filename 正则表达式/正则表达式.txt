\转义字符
\d数字         [0-9]
\D非数字       [^0-9]
\s空白字符     [<空格>\t\r\n\f\n]
\S非空白字符   [^\s]
\w单词字符     [A-Za-z0-9_]
\W非单词字符   [^\w]
. 除换行符的任意字符
？匹配前一个字符0次或者1次
*匹配前一个字符0次或无限次
.*贪心算法     越多越好
.*？非贪心算法  找出满足条件的就可以
()：括号内的数据作为结果返回
括号优先级比中括号优先级高








^匹配字符串开头，多行匹配每一行开头
$匹配字符串末尾，多行匹配每一行末尾
\A进匹配字符串开头
\Z仅匹配字符串末尾
\b匹配\w和\W之间





findall:匹配所有符合规律的内容，返回包含结果的列表
search：匹配并提取第一个符合规律内容，返回一个正则表达式对象（object）
sub：替换符合规律的内容，返回替换后的值
re.S：包括了.和换行符\n
re.I修正大小写
match从头开始匹配，没有匹配出来就为空
search可以出现在字符串的任意一个位置，只能搜索一个出来




.是一个占位符
* 0,1，多次
？一次0次
[jsz]里面只能匹配一个原子
+一次多次0次







得出.com或者.cn的网址例子:
s='<a href=http://www.baidu.com >adadf</a>'
pat='[a-zA-Z]+://[^\s]*[.com|.cn]'
st1=re.search(pat,s)
>>> st1
<_sre.SRE_Match object; span=(8, 28), match='http://www.baidu.com'>
st2=re.compile(pat).findall(s)
>>> st2
['http://www.baidu.com']




匹配电话号码:
s1='hjhf://324254556dsdf</a>'
pat1='[a-zA-Z]+://(\d+)+[a-zA-Z]'
>>> re.compile(pat1).findall(s1)
['324254556']

pat1='[a-zA-Z]://+(\d+)+[a-zA-Z]'
>>> re.compile(pat1).findall(s1)
['324254556']