tcp 
request返回的是3次握手，conn
addr返回的客户端地址

conn.recv(1024)
conn.send(msg.encode('utf-8')

udp：
request返回的元组形式的，（消息，套接字对象（tcp_server））
request[0].decode('utf-8') 这个是元组的的第一个，客户端发的消息，已经解码
request[1] 这个是套接字对象，也就是tcp_server（套接字对象）
addr 这个是返回客户端的ip地址

data,addr=tcp_client.recvfrom(buffer_size)
tcp_client.sendto(data,addr)




udp
服务端：
import  socketserver
#基于udp的通信
class Myserver(socketserver.BaseRequestHandler):
    def handle(self):
        print(self.request)#第一个是客户端发送的消息，第二个是套接字对象
        print(self.request[0].decode('utf-8'))#这个是客户端发送的消息
        print(self.request[1])#套接字对象
        print(self.client_address)#返回的是客户端地址
        self.request[1].sendto(self.request[0].upper(),self.client_address)
        print('服务端已经发送消息')

        # while True:
        #     self.request[]


if __name__ == '__main__':
    s=socketserver.ThreadingUDPServer(('127.0.0.1',8080),Myserver)
    print('已经建立链接循环')
    s.serve_forever()



客户端：
import socketserver
from socket import *
ip_port=('127.0.0.1',8080)
buffer_size=1024

udp_client=socket(AF_INET,SOCK_DGRAM)
# 基于udp的通信
while True:
    msg=input('输入：').strip()
    udp_client.sendto(msg.encode('utf-8'),ip_port)

    print('已经发送消息')
    data,addr=udp_client.recvfrom(buffer_size)#接收服务
    print('接收到的消息',data.decode('utf-8'))








基于tcp的并发式通信：
服务端：
import  socketserver

class Myserver(socketserver.BaseRequestHandler):
    def handle(self):
        print('3次握手conn is', self.request)#conn,3次握手，建立3次握手的过程
        print('客户端返回的ip地址是',self.client_address)#打印的是客户端的ip地址,addr
        while True:
            try:
                print('开始通信循环了')
                data=self.request.recv(1024)
                print('客户端发送的消息是:',data.decode('utf-8'))
                self.request.send(data.upper())
                print('服务端已经发送消息出去了')
            except Exception as e:
                print(e)
                break

if __name__ == '__main__':
    s=socketserver.ThreadingTCPServer(('127.0.2.1',8080),Myserver)#实例化过程，传入2个参数，一个是ip地址，建立链接循环，第二个建立通信循环
    print('已经建立链接')
    s.serve_forever()#永远服务下去



客户端：


from socket import *
ip_port=('127.0.2.1',8080)
buffer_size=1024
back_log=5
tcp_client=socket(AF_INET,SOCK_STREAM)
# tcp_client.bind(ip_port)
tcp_client.connect(ip_port)

while True:
    try:
        print('开始运行客户端1')
        msg=input('输入：').strip()
        tcp_client.send(msg.encode('utf-8'))
        print('客户端已经发送消息给服务端')
        data=tcp_client.recv(buffer_size)
        print('客户端接收的数据是',data.decode('utf-8'))
    except Exception as e:
        print(e)
        break





