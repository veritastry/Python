subprocess
分为 stdout（标准输出）
stdin
stderr（异常输出）

从管道打印，如果数据在管道上，数据不会在屏幕上显示
可以显示到屏幕上,如果显示到屏幕上的话，管道就没有东西了


stdout是标准输出，没有报错的话就是stdout
报错的话就是stderr
打印是res.stdout.read()
报错的话打印就是res.stderr.read()



服务端：
import subprocess
from socket import  *
ip_port=('127.1.1.1',8080)
buffer_size=1024
back_log=5

tcp_server=socket(AF_INET,SOCK_STREAM)
tcp_server.bind(ip_port)
tcp_server.listen(back_log)



while True:
    conn,addr=tcp_server.accept()#建立3次握手
    print('新的客户端链接',addr)#这个就是接受到的客户端的ip地址
    while True:
        try:

            cmd=conn.recv(buffer_size)
            if not cmd:
                break#解决死循环的情况
            print('收到客户端的消息',cmd.decode('utf-8'))#一字节的形式接收到的数据
#执行命令，得到命令的运行结果
            res=subprocess.Popen(cmd.decode('utf-8'),shell=True,
                             stderr=subprocess.PIPE,
                             stdin=subprocess.PIPE,
                             stdout=subprocess.PIPE)#获取的是对象
            err=res.stderr.read()
            if err:
                cmd_res=err#加入err没有问题的话就读取到stderr的值
            else:
                cmd_res=res.stdout.read()

#发消息
            conn.send(cmd_res)
        except Exception as e:
            print(e)
            break#解决异常通信关闭的情况
    conn.close()





客户端：

from socket import *
import subprocess

ip_port=('127.1.1.1',8080)
buffer_size=1024
back_log=5
#基于tcp的通信
tcp_client=socket(AF_INET,SOCK_STREAM)
tcp_client.connect(ip_port)#建立3次握手

while True:
    cmd=input('输入:').strip()#根据用户的额命令来执行操作
    if not cmd:
        continue
    if cmd=='quit':
        break
    tcp_client.send(cmd.encode('utf-8'))#发送消息到服务端
    # print('客户端已经发送消息')
    cmd_res=tcp_client.recv(buffer_size)
    print('命令的执行结果是:',cmd_res.decode('gbk'))#系统默认编码是gbk，不能是utf-8

tcp_client.close()






