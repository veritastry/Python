在bind之前加上setsockopt(SOL_SOCKET,SO_REUSEADDR,1)
就不会出现当前地址正在使用的提示了
udp只管发，不管对方的收没收到，先把数据放到自己的内核缓冲区，对方没有接收到就会丢失，相比之下tcp更加可靠，对方接受到，才会把自己内核态缓冲区的数据清空（接受到ACK响应时，才会把自己的缓冲区数据清空）
发到自己的缓冲区（内核态缓冲区），对方没有收到就会失去

应用程序自己跑的
os 操作底层硬件


tcp:客户端
tcp_client_ex()# connect的扩展版本，出错时返回出错码，不会抛出异常





服务端：

from socket import  *
ip_port=('127.0.0.1',8080)
buffer_zize=1024
back_log=5

tcp_client=socket(AF_INET,SOCK_STREAM)
tcp_client.connect(ip_port)

while True:
    msg=input('输入:').strip()
    if not msg:
        continue
    if  msg=='quit':
        break

    tcp_client.send(msg.encode('utf-8'))
    print('已经发送消息出去')
    data=tcp_client.recv(buffer_zize)
    print('已经收到服务端的消息',data.decode('utf-8'))
tcp_client.close()

客户端1：

from socket import  *
ip_port=('127.0.0.1',8080)
buffer_zize=1024
back_log=5

tcp_client=socket(AF_INET,SOCK_STREAM)
tcp_client.connect(ip_port)

while True:
    msg=input('输入:').strip()
    if not msg:
        continue
    if  msg=='quit':
        break

    tcp_client.send(msg.encode('utf-8'))
    print('已经发送消息出去')
    data=tcp_client.recv(buffer_zize)
    print('已经收到服务端的消息',data.decode('utf-8'))
tcp_client.close()


客户端2代码可以和客户端1相同，可以有多个客户端，实现并发操作
多线程的意思是一个服务端可以开多个进程，每一个进程和一个客户端建立链接，实现互不干扰的效果
建立的链接ip地址也不同



