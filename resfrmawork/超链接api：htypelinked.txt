当是外键的时候，存的是主键值

class  BookModelSerizter(serializers.ModelSerializer):
    class Meta:
        model=Book
        fields='__all__'
####如果是外键的话，取的是主键的名字
    ##下面相当于是加个连接url，当你访问那个url的时候，就进行反向解析这个url
        author = serializers.HyperlinkedIdentityField(
            view_name='book_detail',  ##反向解析
            lookup_field='author_id',  ##这里是取这个id值，当你循环到那个外键的那个id值的值的时候，作为参数传进去
            lookup_url_kwarg='pk'  ##把还是那个面的id作为参数传进去，就是在url路由里面的有名分组
        )







'''
操作：
查看所有的数据queryset类型，all（）
具体操作：
all_list=Book.objects.all()
handler=Bookserizter(all_list,many=True）##这个是序列化操作#序列化操作：将queryset和model对象》》json格式的数据
return  Response(handler_data)
创建数据
是post的请求，不需要传参数id进来
requtes.data是接受到的创建的数据
handler=Bookserizter(data=request.data)#反序列操作：将接受到的requets.data的json数据格式转化为queryset对象类型和model对象
if handler.is_valid():
handler.save()##保存的是queryset对象类型，已经进行反序列化的操作了
保存的是queryset类型的数据

return Response(handler.data)
else;
return  Response(handler.errors)


'''



class  bookdetail(APIView):

    # def get(self,request):
    #     ##查看所有的书籍
    #     book_list=Book.objects.all()
    #     all_list=BookModelSerizter(book_list,many=True)
    #
    #     return Response(all_list.data)

    def  get(self,request,id):
        ##查看单条数据
        print('执行get的请求')
        book_obj=Book.objects.filter(id=id).first()#####拿到的是queryset对象，下面进过序列化得到的是一个有序的字典，就可以渲染出来，更好的处理
        # after_data=BookModelSerizter(book_obj)
        after_data=BookModelSerizter(book_obj,context={'request':request})##文本类型，这个是和上面的连接有关，后面的参数context,HyperlinkedIdentityField
        return  Response(after_data.data)
    ######将queryset或者是modle对象序列化成josn数据
    #### after_data=BookModelSerizter(book_obj)










##下面是传了参数进来id
'''
操作：
查看单条数据   
model_obj=Book.objects.filter(pk=id).first()##是一个model对象
handler=BookModelSerizter(model_obj)##对model对象进行序列化出租（有序的字典orderdic)
return   Response(handler.data)##责怪Response是resframe特有的方法，响应器orderdic转化成正常的字典的格式
修改某一条数据(到那时post，put的请求的时候，都可以进行反序列的操作（修改和创建数据都是queryset对象类型)
model_obj=Book.objects.filtr(pk=id).first()
handler=BookModelSerizter(model_obj,data=request.data)###后面是接受到的数据，前面是对哪一个数据进行编辑操作，如果没有加前面的话，就是create的操作了
if handler.is_valid():
handler.save()
retutn  Response(handler.data)
else;
return  Response(handler.errors)
删除某一条数据
delete_obj=book.objects.filter(pk=id).delete()
return Response()##不返回值
'''


    def put(self,request,id):
        book_obj=Book.objects.filter(id=id).first()#####拿到的是queryset对象，下面进过序列化得到的是一个有序的字典，就可以渲染出来，更好的处理
        after_hander=BookModelSerizter(book_obj,data=request.data)###对前面的哪一个表的数据进行编辑操作，如果不加前面的话就会是创建数据的操作
#########后面的data是有requets表单里面的数据的时候，要加参数data，就知道哦啊是form_data里面的数据
        if  after_hander.is_valid():
            after_hander.save()
            return  Response(after_hander.data)###返回这个已经修改好的数据回来，返回传这个已经序列化好的数据出来
        else:

            return  Response(after_hander.errors)


    def   delete(self,request,id):
        Book.objects.filter(pk=id).delete()

        return  Response('删除成功')