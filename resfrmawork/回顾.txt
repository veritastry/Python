json


序列化组件：




字符串，独特的数据结构转化为字符串，可以进行数据交流的的
双方都支持的一种数据结构




queryset是列表  many=true
model  obj是字典  many=False



总之记住：
self，参数，*args，**kwargs
返回值
谁调用了这个方法



apiview的方法：
第一种情况：
没有传入参数id

查看所有的数据：
def   get(self,reqeust):
all_data=Book.objects.all()
handler=BookdetailSerialzer(all_data,many=True)

return  Respone(handler)



如果是modleobj的话，
handler=BookdetailSerializer(obj,many=false):
handler=BookdetailSerializer(queryset,many=True)





def  post(self,request):
保存数据：
handler=BookdetailSerializers(data=requets.data)
if  handler.is_valid:

handler.save()



json数据转化为queryset对象，modle_obj对象




apiviews的方法


modelserializer



class  ModelServilater(serralizer.modelSerializer):
model=Book






传入了参数的用法：单条数据
obj=Book.objects.filter(pk=id).first()


handler=BokdetailSeriazter(obj,data=request.data)










view
apiview
mixIn(List,creare)

首先告诉是那个表，在进行序列化操作





mixin  基于的单个类
from  rest_framework    import  minxins
from  rest_framework   import generics

class  BookViwe(minins.ListMinxin,minins.CreateMinxin):
qeuryset=Book.objects.all()
serilizter=BookModelSelizer()



基于通用类




版本1：serizalizer
view
apiview

版本2：modelserizater


版本3:：mixins
基于单个类
基于通用类


版本4：
as_view





def dispath()

初始化操作
构建新的requets

url分发

执行组件
认证，权限，频率


