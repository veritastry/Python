<template>
<textrea  v-model='createmark'></textrea>这立马可以监听这个实时输入的数据，然后在右边渲染出来
<div  v-html='currenmark'> </div>
##在div渲染出来，v-html，按照这个格式
<button @click="" >点击</button>
<button :class="" >点击</button>
</template>



<script>

export   default:{


methods:{
this.createmark###调用方法
this.getmark
}


computed:{
createmark:{
set:(newvalue){##这个传过来的参数是在v-model里面监听到的数据，输入的数据

this.$store.content=newvalue##在了一个模块文件里面进行赋值操作，赋值这个输入的值

return  ....}

get:(){#最开始调用的数据，在textarea里面渲染出来

return  this.$store.content
}
}


currenmark(){
return   mark(this.createmark)}##用来mark的方法，调用了createmark的方法，实际是里面的get方法
}


}


</script>


@  v-bind  绑定下面的数据属性，可以直接拿到下面的数据属性
: v-on  类似于click，实时监听，也可以实时拿到下面的数据属性





main.js里面
import  $  from   'jquery'

mutation
更改vuex的store中的状态的唯一方法是提交mutation


main.js里面写上去的
mutation:{

getAllData(state){


$.ajax({
url:'',
method:'',
success:function(data){
	console.log(data)
	
	
},
error:function(){
	
}
}



//在里面的作用于是里面的方法的








//在app.vue里面进行的调用
//在程序一加载啊的时候就执行
mounted:{
this.$store.commit("getAllData");
//相当于是调用这个方法，执行ajax的请求
	
}






//this.$store.commit("addnote",json);
/*
后面的json是传给main.js里面addnote方法的参数
注意区别

接受到传过来的数据
addnote(json):{
	console.log(json)
}

*/





































































