cs=model.ForeignKey(“class“）
这个cs包含了class类的一整条记录，虽然是学生表的cs，但是它封装了class的一整条数据，一个对象，可以取cs里面的
名字（取得就是class某个字段的名字）
就是class的一条数据（一行数据）封装在cs里面，可以跨表查询obj.cs.name是另一个表的名字`
obj.cs_id是自己的表的外键id，obj.cd.id是另一个表的id（取数据的时候用.）


queryset对象集合，列表形式保存

class.object.filter(id=1).first()
否则[0]
拿到的是一个对象集合，所以要加first（）否则[0]




class.object.create(id=1,...)创建一行数据



student.object.filter(cs__name='一班').delete
这个得用双下划线，这个是删除一班的所有学生，不能用.,cs.name，得用__双下划线，
这个是filter的时候必须用的（cs__name是了一个表的名字）




m=model.ManytoManyFiled('teacher')
m是manytomany的的字段，用于操作第三张表的桥梁
这个会自动创建第三张表

当对第三张表加数据的时候
obj=class.object.filter(id=1).first()
obj.m.add(2)#就是id为1（class表）对应id为2（老师表）
obj.m.add([2,3,5])一次性class的id=1关联多个老师


obj=class.object.filter(id=1).first()
obj.m.remove([3,4])将class中id=1的所关联的老师id=3和4的删除
ob.m.clear（）这个是一次性删除关联班级为1的老师id（都是基于第三张表来删除的关系-）

obj.m.set([2,3,4])这个是将class的id=1的关联老师为id=2和3,和4的老师关联，只关联这3个老师



查询出3班的所有老师名字

obj=class.object.filtr(id=3).first()
obj.name
obj.id自己表的对象
obj.m.all()这个取得就是所有老师id和名字
m是操作第三张表的桥梁




类代表数据库表
类的而对象代表数据库的一行记录
foreign代表的是关联表的一行记录（类的对象）
manytomany字段，自动生成第三张表，操作第三张表的间接操作


字典用索引来取
列表用.来取


学生表：student
cs=models.ForeiongKey('class',on_delete....)




实例：

所有学生的姓名所在的班级
第一种方式：
stu_list=student.object.all()
for row in stu_list:
	row.id
	row.cs.name每个学生对应的班级名称

取到的stu_list是[obj,obj,obj,obj....]queryset对象集合



第二种方式：
stu_list=student.object.all().value('id','stuname','cs__name')

stu_list=student.object.all().value('id','stuname')
stu_list[‘id’]
stu_list[’name’]
这个取得是 [{'id':1,'stuname':stu1},{'id':2,'stuname':stu2}....]字典形式的
要通过索引来取，索引就是stu_list[‘id‘]



第三种方式：
stu_list=student.object.all().value_list('id','stuname')

stu_list.id
stu_list.stuname

这个取得是[{1,stu1},{2,stu2},{3,stu3}.....]列表形式的
要通过点来取，取到的是一个{}里面的值


注意：跨表查询用__,自己的表查询用.


stu_list=student.objects.all().value('stuname','cs__name')

for row in stu_list:
	print(row['stuname'],row['cs__name'])





跨表查询 class__student__school（多张表跨表）

当有foreignkey的时候，可以关联查询，通过class.student__set.all()拿到所有queryset对象集合


正向：foreignkey字段
反向：小写表名__set  >>>>class里面的foreign后面加related_name='sssss'就可以替代小写表名__set，空也会列出来
manytomany字段
主表加所关联的表





