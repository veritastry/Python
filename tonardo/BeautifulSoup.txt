requests

请求头
请求体


referer  记录上一次的访问记录


BeautifulSoup
soup.select('#link2')
按照js，css的选择器来找

tag=soup.find(id='i1')
tag.name 获取这个标签名字


attrs=tag.attrs获取这个标签的全部属性
tag.attrs={'ik':123}这个可以自己修改这个标签的属性
tag.attrs['id']='svgvsg'
这个可以增加一个属性，在这个标签里面

注意：重点，这个tag是一个拿到的对象，你可以对这个对象做任意
的处理，比如加属性，删除某个属性，但是这个原来的（最开始的内容是不会改变的）

可以找他的孩子

html='''<body>
<li>
<a>nihao</a></li>
<li>hello</li>
</body>
'''


from  bs4 import BeautifulSoup
from  bs4.element import  Tag
soup=BeautifulSoup(html,features='lxml')
# tags=soup.find_all(name='a')
###############找到name为a的标签的名字
tags=soup.find('body').children
######################拿到它的body下面全部的子标签


for tag in tags:
    print(tag)
    #################这个会打印出这个文本内容
    # 进行判断#
    if type(tag)==Tag:############################如果这个标签有的话，就打印出来，否则的话就是文本信息了，tag就是标签的意思了
        print(tag,type(tag))
    else:
        print('就是文本了') 


clear：
将标签的所有子标签全部清空（保留标签名）
tag=soup.find('body')
tag.clear()
print(soup)这个是会把body里面的内容全部清空

decompose  递归的删除所有的标签
body=soup.find('body')
body.decompose()
print(soup)
######注意:这个是删除这个body里面的所有标签

extract这个可以返回这个删除的标签
v=soup.find('body').extract()
print(v)这个会打印出来这个删除的所有标签
print(soup)这个是处理之后的结果

decode 转化为字符串

encode 这个是转化为字节

print（tag.encode_content())
这个是不会包含这个标签名字的
print(tag.decode_content())
body标签名字




find

tag=soup.find('a')找到第一个
tag=soup.find(name='a',attrs={'class':'sister'},recursive=True,text='Lasd')这个是递归的往下去找
筛选条件后面的
tag=soup.find(name='a',class_='sister’,recursive=True,text='Lasd')
这个class_是内置方法为sister的，按照这个往下去找
find_all


soup.find_all(name=['a','li'])


soup.find_all(href=['link','link2'])这个里面在的都是或的意思
link或者link2的



方法筛选：
def fun(tag):
return tag.has_attr('class') and tag.has_attr('id')
找到这个标签为class里面有这个属性的class和有这个id的标签

v=soup.find(name=func)################筛选条件
print(v)

get_text获取标签的内部文本
v=tag.get_text()
print(v)找到这个标签的内部文本
找文本


index  检查标签在某标签的索引位置
tag=soup.fing('body')
v=tag.index(tag.find('div')找到它的索引位置
print(v)


tag=soup.fing('body')
for i ,v in emumerate(tag):
print(i,v)

is__empty_element  是否是空标签


tag.previous 
tag.previous_element
tag.previous_elements
tag.previous_sibling
tag.previous_siblings
tag.parent
tag.parents


查找某标签关联的标签
tag.find_next()
tag.find_all_next()
tag.find_next_siblings()
tag.find_next_sibling()
tag.find_previous_sibling()
tag.find_parents()
tag.find_parent()




select('title')
soup=select('body a')
################找到这个body下面的a标签
select('html head title')
这个是找到后代
select('span,a')
，这个是找到span标签和a标签，或者


tag.string
stripped_strings递归内部获取所有标签的文本

append创建一个标签，在在后面加一个标签，原来的标签就会没有
tag.append()

tag=soup.find('a')
tag.append(soup.find('li')
print(soup)
这就是找到这li标签，放到a标签后面

还可以自己创建一个标签
obj=tag(name='li',attr={'id':'dsd'}
obj.string=''这个是文本
tag=tag.find('a')
tag.append(obj)
这个是自己创建一个标签

tag.insert(3,obj)
这个可以指定插到那个位置，索引位置 

insert_after(obj)放到之后
insert_before(obj)

replace_with
替换
tag.replace_with(obj)这个只是内部联系变了




wrap
包裹，可以把自己给移除掉，自己这个标签
uwarp 
不包裹





































































































